double PostFixCalculate(char* PostFixString)
{
	std::stack<char*> PostFixCal;

	char* token = strtok(PostFixString, " ");
	while (token != NULL)
	{
		if (token[0] >= '0' && token[0] <= '9')
		{
			PostFixCal.push(token);
		}
		else if (IsOperator(token[0]) != -1)
		{
			char* second = PostFixCal.top();
			PostFixCal.pop();
			char* first = PostFixCal.top();
			PostFixCal.pop();

			double result = 0;
			switch (token[0])
			{
			case '+':
				result = atof(first) + atof(second);
				break;
			case '-':
				result = atof(first) - atof(second);
				break;
			case '/':
				result = atof(first) / atof(second);
				break;
			case '*':
				result = atof(first) * atof(second);
				break;
			}
			
			char* temp = new char[10];
			sprintf(temp, "%f", result);
			PostFixCal.push(temp);
		}
		else // 예외 처리
		{
			printf("error");
			return NULL;
		}

		token = strtok(NULL, " ");
	}
	char* Final = PostFixCal.top();
	PostFixCal.pop();

	return atof(Final);
}

void Prom_10()
{
	char* PostFixString = ConvertPostFix(Infix);
	printf("%f\n", PostFixCalculate(PostFixString));
}