char Infix[] = "81 + 95 - 100 * 3 / 5 ( 85 + 12 - 8 ) + 5";
char Operators[] = "+-/*()";
int OperatorPriority[] = { 1, 1, 2, 2, -1, -1 };

std::stack<char*> PostFixStack;

int IsOperator(char ch) {
	for (int i = 0; i < 6; ++i) {
		if (ch == Operators[i]) {
			return i;
		}
	}

	return -1;
}

int GetPriority(char* Operator)
{
	return OperatorPriority[IsOperator(Operator[0])];
}

char* OperatorProcess(char* Operator, char* Cursor) {
	if ((PostFixStack.size() == 0) || Operator[0] == '(') {
		PostFixStack.push(Operator);
	}
	else {
		char* Top = PostFixStack.top();
		while (!(PostFixStack.size() == 0) && GetPriority(Top) >= GetPriority(Operator)) {
			PostFixStack.pop();
			if (Top[0] == '(') {
				break;
			}
			sprintf(Cursor, "%s ", Top);
			Cursor += (strlen(Top) + 1);

			if (!(PostFixStack.size() == 0)) {
				Top = PostFixStack.top();
			}
		}if (Operator[0] != ')') {
			PostFixStack.push(Operator);
		}
	}
	return Cursor;
}

char* ConvertPostFix(char* InfixNotation) {
	char* PostFixString = new char[strlen(InfixNotation) + 1];
	char* Cursor = PostFixString;

	char* token = strtok(InfixNotation, " ");
	while (token != NULL) {
		if (token[0] >= '0' && token[0] <= '9') {
			sprintf(Cursor, "%s ", token);
			Cursor += (strlen(token) + 1);
		}
		else if (IsOperator(token[0]) != -1) {
			Cursor = OperatorProcess(token, Cursor);
		}
		else {
			printf("error");
			return NULL;
		}

		token = strtok(NULL, " ");
	}

	while (!(PostFixStack.size() == 0)) {
		char* Pop = PostFixStack.top();
		PostFixStack.pop();
		sprintf(Cursor, "%s ", Pop);
		Cursor += (strlen(Pop) + 1);
	}

	sprintf(Cursor, "\0");
	return PostFixString;
}

void Prom_9()
{
	char* PostFixString = ConvertPostFix(Infix);
	printf("%s\n", PostFixString);
}